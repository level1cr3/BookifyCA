# Authorization
	> We used external identity provider (keycloak) for our authentication.
	
	> and authorization adds an additional layer of security on top of authentication.
	
	> authentication allows us to know who is the current user trying to access our system. 
	
	> and authorization allows us to determine what the current user cadn do.


There are 3 types of authorization that we are going to see.

1. Roles authorization. : asp.net core has the native support for the role based authorization. we have to specify the authorize attribute. 
and give role as the parameter. this roles params expects comma seprated roles that we wanna give.

How role based authorization works ?
> we use 'authorize' attribute to specify the role that we require the authenticated users to have. To be able to call the endpoint. Otherwise they are going to get the
forbidden response. telling them they do not have the required access.

Asp.net core uses a specific claim on the json webtoken. to determine if the user have this claim.

We choose manage the role inside our own application. we are only using the keycloak for authentication.

So we need to somehow add role claim to the jwt token. so it can be authorized in the api endpoint.

Asp.net core has support for modifying users claims. we can do this using 'IClaimsTransformation' interface.



2. Permissions authorization. : is a way to apply the policy based authorization in asp.net core. In "Authorize"" attribute we can also pass in the argument name policy.
we can use "Policy" property to define our custom policy.

ex: we could give this. [Authorize(Policy = "users:read")]

So users that authnticated have to spcify this policy to access this endpoint.
we also need to add the required logic to verify this authorization policy.


Why would we want to do this to begin with. : since we already have the role based authorization.

> Because permission based or policy based authorization is much more fine grained. Because we can create custom permission for each use case or endpoint in 
your api. You can also decide which role or which group of user will have access to particular permission.

> It also very helpful if we can manage permission from the database.


> an alternative approch would be to use. enums to define your roles and permissions. It might be better in terms of maintainace from code perspective.
However we perfer to manage our role and permission from database. because now i can update the roles and permission. without making changes to our code.
and redeploying the permission.


> we want to associate it with particular role. so roles themselfs will have the collection of permissions. we are gonna create many to many role permission policy


[Authorize(Roles = Roles.Registered)] if we want to we can both role based and permission based authorization. 
But this doesn't really make sense because permissions are connected to the roles


3. Resource-based authorization. : example > if i booked a hotel. Only i should be able to view my booking not anyone else. But currently there is no such 
validation for it.

Basically user who made the booking. Should be the only one who should be able to access the booking.

// Granted somebody would need to know the exact identifier of the booking.

> what we need to do inside the getbookingQueryHandler is ensure that userId of booking response matches the current logged in user.
> You might be tempted to implement the genric solution for resourse based authorization. It is defenatily possible and even required in some-application
but for our application this is enough.



-- fixed keycloaack issue.

The connection refused error typically occurs due to network isolation in Docker. Since you're running in a Docker Compose setup, 
you need to use the service name instead of localhost. Update your Keycloak configuration to use the service name:

"KeyCloak": {
    "AdminUrl": "http://bookify-idp:8080/admin/realms/bookify/",
    "TokenUrl": "http://bookify-idp:8080/realms/bookify/protocol/openid-connect/token",
    "AdminClientId": "bookify-admin-client",
    "AdminClientSecret": "UZDmbNxWmV4TlpaCRcju6pMRsyuV3er1",
    "AuthClientId": "bookify-auth-client",
    "AuthClientSecret": "3E3yvXaYppoYBF3Ir6DgtEzADKKzSurZ"
}


Key changes:

Replace localhost:18080 with bookify-idp:8080
Use the service name from docker-compose
Use the container's internal port (8080)

This resolves Docker network routing issues by using the internal Docker network service name.